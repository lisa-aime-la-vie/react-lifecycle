{"ast":null,"code":"import _classCallCheck from \"/Users/lwang9/Work/workspace1/react-lifecycle/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lwang9/Work/workspace1/react-lifecycle/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/lwang9/Work/workspace1/react-lifecycle/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lwang9/Work/workspace1/react-lifecycle/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/lwang9/Work/workspace1/react-lifecycle/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/lwang9/Work/workspace1/react-lifecycle/src/components/LifeCycle/Clock.js\";\nimport React from 'react';\nimport classNames from 'classnames';\nimport Alert from 'react-aaui/es/alert';\nimport './Clock.less';\n\nvar Clock =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(Clock, _React$Component);\n\n  function Clock(props) {\n    var _this;\n\n    _classCallCheck(this, Clock);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Clock).call(this, props));\n\n    _this.getClock = function () {\n      var currentTime = new Date();\n      return {\n        hours: currentTime.getHours(),\n        minutes: currentTime.getMinutes(),\n        seconds: currentTime.getSeconds(),\n        ampm: currentTime.getHours() >= 12 ? \"pm\" : \"am\"\n      };\n    };\n\n    _this.setTimer = function () {\n      _this.timer = setTimeout(_this.updateClock, 1000);\n    };\n\n    _this.updateClock = function () {\n      _this.setState({\n        clock: _this.getClock()\n      });\n    };\n\n    _this.state = {\n      clock: _this.getClock()\n    };\n    console.log('constructor');\n    return _this;\n  } //Enable a component to update its internal state as the result of changes in props\n  // static getDerivedStateFromProps(props, state) {\n  //   console.log('**************************************');\n  //   console.log('%cgetDerivedStateFromProps', 'color:#ffb934');\n  //   if (props.color !== state.color) {\n  //     return {\n  //       ...state,\n  //       color: props.color\n  //     }\n  //   }\n  //   return null;\n  // }\n\n\n  _createClass(Clock, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setTimer();\n      console.log('%ccomponentDidMount', 'color:#45a162');\n    }\n    /* Only exists as a performance optimization,\n     * use PureComponent(shallow comparison of props and state)\n    */\n    // shouldComponentUpdate(nextProps, nextState) {\n    //   console.log('%cshouldComponentUpdate', 'color:#ffb934');\n    //   if (nextProps.stop) {\n    //     return nextProps.color !== this.props.color;\n    //   }\n    //   return true;\n    // }\n\n    /* Enables component to capture some information from the DOM before potentially changed,\n     * returned value as parameter of componentDidUpdate\n    */\n    // getSnapshotBeforeUpdate(prevProps, prevState) {\n    //   console.log('%cgetSnapshotBeforeUpdate', 'color:#ffb934');\n    //   if (prevProps.color !== this.props.color) {\n    //     return {\n    //       msg: `color has been changed from ${prevProps.color} to ${this.props.color}`\n    //     }\n    //   }\n    //   return null;\n    // }\n\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps, prevState, snapshot) {\n      if (snapshot !== null) {\n        Alert.info(JSON.stringify(snapshot.msg));\n      }\n\n      this.setTimer();\n      console.log('%ccomponentDidUpdate', 'color:#45a162');\n      console.log('**************************************');\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.timer && clearTimeout(this.timer);\n      console.log('%ccomponentWillUnmount', 'color:#45a162');\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          _this$state$clock = _this$state.clock,\n          hours = _this$state$clock.hours,\n          minutes = _this$state$clock.minutes,\n          seconds = _this$state$clock.seconds,\n          ampm = _this$state$clock.ampm,\n          color = _this$state.color;\n      console.log('render');\n      return React.createElement(\"div\", {\n        className: classNames('clock', color),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \"\".concat(hours, \" : \").concat(minutes, \" : \").concat(seconds, \" \").concat(ampm));\n    }\n  }]);\n\n  return Clock;\n}(React.Component);\n\nexport default Clock;","map":{"version":3,"sources":["/Users/lwang9/Work/workspace1/react-lifecycle/src/components/LifeCycle/Clock.js"],"names":["React","classNames","Alert","Clock","props","getClock","currentTime","Date","hours","getHours","minutes","getMinutes","seconds","getSeconds","ampm","setTimer","timer","setTimeout","updateClock","setState","clock","state","console","log","prevProps","prevState","snapshot","info","JSON","stringify","msg","clearTimeout","color","Component"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,OAAOC,KAAP,MAAkB,qBAAlB;AACA,OAAO,cAAP;;IAEMC,K;;;;;AACJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;;AADiB,UAiEnBC,QAjEmB,GAiER,YAAM;AACf,UAAMC,WAAW,GAAG,IAAIC,IAAJ,EAApB;AACA,aAAO;AACLC,QAAAA,KAAK,EAAEF,WAAW,CAACG,QAAZ,EADF;AAELC,QAAAA,OAAO,EAAEJ,WAAW,CAACK,UAAZ,EAFJ;AAGLC,QAAAA,OAAO,EAAEN,WAAW,CAACO,UAAZ,EAHJ;AAILC,QAAAA,IAAI,EAAER,WAAW,CAACG,QAAZ,MAA0B,EAA1B,GAA+B,IAA/B,GAAsC;AAJvC,OAAP;AAMD,KAzEkB;;AAAA,UA2EnBM,QA3EmB,GA2ER,YAAM;AACf,YAAKC,KAAL,GAAaC,UAAU,CAAC,MAAKC,WAAN,EAAmB,IAAnB,CAAvB;AACD,KA7EkB;;AAAA,UA+EnBA,WA/EmB,GA+EL,YAAM;AAClB,YAAKC,QAAL,CAAc;AACZC,QAAAA,KAAK,EAAE,MAAKf,QAAL;AADK,OAAd;AAGD,KAnFkB;;AAEjB,UAAKgB,KAAL,GAAa;AACXD,MAAAA,KAAK,EAAE,MAAKf,QAAL;AADI,KAAb;AAGAiB,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AALiB;AAMlB,G,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;wCAEoB;AAClB,WAAKR,QAAL;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmC,eAAnC;AACD;AAED;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;uCAEmBC,S,EAAWC,S,EAAWC,Q,EAAU;AACjD,UAAIA,QAAQ,KAAK,IAAjB,EAAuB;AACrBxB,QAAAA,KAAK,CAACyB,IAAN,CAAWC,IAAI,CAACC,SAAL,CAAeH,QAAQ,CAACI,GAAxB,CAAX;AACD;;AACD,WAAKf,QAAL;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC,eAApC;AACAD,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ;AACD;;;2CAEsB;AACrB,WAAKP,KAAL,IAAce,YAAY,CAAC,KAAKf,KAAN,CAA1B;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAsC,eAAtC;AACD;;;6BAuBQ;AAAA,wBACqD,KAAKF,KAD1D;AAAA,0CACCD,KADD;AAAA,UACUZ,KADV,qBACUA,KADV;AAAA,UACiBE,OADjB,qBACiBA,OADjB;AAAA,UAC0BE,OAD1B,qBAC0BA,OAD1B;AAAA,UACmCE,IADnC,qBACmCA,IADnC;AAAA,UAC2CkB,KAD3C,eAC2CA,KAD3C;AAEPV,MAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ;AACA,aACE;AAAK,QAAA,SAAS,EAAEtB,UAAU,CAAC,OAAD,EAAU+B,KAAV,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAAgDxB,KAAhD,gBAA2DE,OAA3D,gBAAwEE,OAAxE,cAAmFE,IAAnF,EADF;AAGD;;;;EA5FiBd,KAAK,CAACiC,S;;AA+F1B,eAAe9B,KAAf","sourcesContent":["import React from 'react';\nimport classNames from 'classnames';\nimport Alert from 'react-aaui/es/alert';\nimport './Clock.less';\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clock: this.getClock()\n    }\n    console.log('constructor');\n  }\n\n  //Enable a component to update its internal state as the result of changes in props\n  // static getDerivedStateFromProps(props, state) {\n  //   console.log('**************************************');\n  //   console.log('%cgetDerivedStateFromProps', 'color:#ffb934');\n  //   if (props.color !== state.color) {\n  //     return {\n  //       ...state,\n  //       color: props.color\n  //     }\n  //   }\n  //   return null;\n  // }\n\n  componentDidMount() {\n    this.setTimer();\n    console.log('%ccomponentDidMount', 'color:#45a162');\n  }\n\n  /* Only exists as a performance optimization,\n   * use PureComponent(shallow comparison of props and state)\n  */\n  // shouldComponentUpdate(nextProps, nextState) {\n  //   console.log('%cshouldComponentUpdate', 'color:#ffb934');\n  //   if (nextProps.stop) {\n  //     return nextProps.color !== this.props.color;\n  //   }\n  //   return true;\n  // }\n\n  /* Enables component to capture some information from the DOM before potentially changed,\n   * returned value as parameter of componentDidUpdate\n  */\n  // getSnapshotBeforeUpdate(prevProps, prevState) {\n  //   console.log('%cgetSnapshotBeforeUpdate', 'color:#ffb934');\n  //   if (prevProps.color !== this.props.color) {\n  //     return {\n  //       msg: `color has been changed from ${prevProps.color} to ${this.props.color}`\n  //     }\n  //   }\n  //   return null;\n  // }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (snapshot !== null) {\n      Alert.info(JSON.stringify(snapshot.msg));\n    }\n    this.setTimer();\n    console.log('%ccomponentDidUpdate', 'color:#45a162');\n    console.log('**************************************');\n  }\n\n  componentWillUnmount() {\n    this.timer && clearTimeout(this.timer);\n    console.log('%ccomponentWillUnmount', 'color:#45a162');\n  }\n  \n\n  getClock = () => {\n    const currentTime = new Date();\n    return {\n      hours: currentTime.getHours(),\n      minutes: currentTime.getMinutes(),\n      seconds: currentTime.getSeconds(),\n      ampm: currentTime.getHours() >= 12 ? \"pm\" : \"am\"\n    };\n  }\n\n  setTimer = () => {\n    this.timer = setTimeout(this.updateClock, 1000);\n  }\n\n  updateClock = () => {\n    this.setState({\n      clock: this.getClock()\n    })\n  }\n\n  render() {\n    const { clock: { hours, minutes, seconds, ampm }, color } = this.state;\n    console.log('render');\n    return (\n      <div className={classNames('clock', color)}>{`${hours} : ${minutes} : ${seconds} ${ampm}`}</div>\n    );\n  }\n}\n\nexport default Clock;"]},"metadata":{},"sourceType":"module"}