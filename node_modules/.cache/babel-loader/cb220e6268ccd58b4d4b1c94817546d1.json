{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';\nimport _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _createClass from 'babel-runtime/helpers/createClass';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport ReactDOM from 'react-dom';\nimport classNames from 'classnames';\nimport Alert from './Alert';\nimport { noop, omit } from '../shared/utils';\nimport './AlertBar.less';\n\nvar AlertBar = function (_React$PureComponent) {\n  _inherits(AlertBar, _React$PureComponent);\n\n  function AlertBar() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, AlertBar);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AlertBar.__proto__ || _Object$getPrototypeOf(AlertBar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {\n      show: false\n    }, _this.setRef = function (element) {\n      _this.element = element;\n    }, _this.handleClose = function () {\n      _this.setState({\n        show: false\n      });\n\n      _this.element && _this.element.addEventListener('animationend', function () {\n        _this.props.onClose();\n      });\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(AlertBar, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var timeout = this.props.timeout;\n      this.animateShow(timeout);\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      clearTimeout(this.animationFrame);\n\n      if (this.timer) {\n        clearTimeout(this.timer);\n      }\n    }\n  }, {\n    key: 'animateShow',\n    value: function animateShow(timeout) {\n      var _this2 = this;\n\n      this.animationFrame = setTimeout(function () {\n        _this2.setState({\n          show: true\n        });\n      });\n\n      if (timeout) {\n        this.timer = setTimeout(function () {\n          _this2.setState({\n            show: false\n          });\n        }, timeout);\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          message = _props.message,\n          type = _props.type,\n          className = _props.className,\n          container = _props.container,\n          rest = _objectWithoutProperties(_props, ['message', 'type', 'className', 'container']);\n\n      var show = this.state.show;\n      var classes = classNames({\n        'alert-bar': true,\n        show: show\n      }, className);\n      var bar = React.createElement('div', {\n        className: classes,\n        ref: this.setRef\n      }, React.createElement(Alert, _extends({}, omit(rest, ['timeout']), {\n        type: type,\n        onClose: this.handleClose\n      }), React.createElement('span', null, message)));\n      return container ? ReactDOM.createPortal(bar, container) : bar;\n    }\n  }]);\n\n  return AlertBar;\n}(React.PureComponent);\n\nAlertBar.defaultProps = {\n  onClose: noop\n};\nexport default AlertBar;","map":null,"metadata":{},"sourceType":"module"}