import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import * as React from 'react';
import className from 'classnames';

import Flowout from './Flowout';
import FlowoutController from './FlowoutController';

var PopUpMenu = function (_React$PureComponent) {
  _inherits(PopUpMenu, _React$PureComponent);

  function PopUpMenu() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, PopUpMenu);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = PopUpMenu.__proto__ || _Object$getPrototypeOf(PopUpMenu)).call.apply(_ref, [this].concat(args))), _this), _this.render = function () {
      var _this$props = _this.props,
          controllerIcon = _this$props.controllerIcon,
          children = _this$props.children,
          shown = _this$props.shown,
          toggleFlowOut = _this$props.toggleFlowOut,
          renderMenuHeader = _this$props.renderMenuHeader,
          direction = _this$props.direction;


      return React.createElement(
        'div',
        { className: className('pop-up-menu', 'pop-up-menu--' + direction) },
        React.createElement(FlowoutController, {
          toggleFlowOut: toggleFlowOut,
          iconName: controllerIcon }),
        React.createElement(
          Flowout,
          {
            shown: shown,
            toggleFlowOut: toggleFlowOut,
            direction: direction,
            renderMenuHeader: renderMenuHeader },
          children
        )
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  return PopUpMenu;
}(React.PureComponent);

PopUpMenu.defaultProps = {
  shown: false,
  direction: 'left'
};
export default PopUpMenu;