import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import * as React from 'react';
import classNames from 'classnames';

var Flowout = function (_React$PureComponent) {
  _inherits(Flowout, _React$PureComponent);

  function Flowout() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, Flowout);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Flowout.__proto__ || _Object$getPrototypeOf(Flowout)).call.apply(_ref, [this].concat(args))), _this), _this.componentDidUpdate = function (_ref2) {
      var shown = _ref2.shown;

      if (shown !== _this.props.shown) {
        if (_this.props.shown) {
          _this.fixBody();
        } else {
          _this.unfixBody();
        }
      }
    }, _this.fixBody = function () {
      if (document.body && document.body.style) {
        var bodyStyles = document.body.style;
        var documentClientWidth = document.documentElement && document.documentElement.clientWidth;
        var scrollbarWidth = documentClientWidth && window.innerWidth - documentClientWidth;
        _this.bodyOverflowX = bodyStyles.overflowX;
        _this.bodyOverflowY = bodyStyles.overflowY;
        _this.bodyPaddingRight = bodyStyles.paddingRight;
        _this.bodyPosition = bodyStyles.position;
        _this.windowScrollY = window.scrollY;
        _this.bodyTop = bodyStyles.top;
        _this.bodyWidth = bodyStyles.width;
        /* istanbul ignore else */
        if (scrollbarWidth && scrollbarWidth > 0) {
          var _getComputedStyle = getComputedStyle(document.body),
              paddingRight = _getComputedStyle.paddingRight;

          bodyStyles.paddingRight = parseInt(paddingRight, 10) + parseInt(scrollbarWidth, 0) + 'px';
          if (_this.root) {
            _this.root.style.paddingRight = bodyStyles.paddingRight;
          }
        }
        bodyStyles.overflowX = 'hidden';
        bodyStyles.overflowY = 'hidden';
        bodyStyles.position = 'fixed';
        bodyStyles.top = '-' + _this.windowScrollY + 'px';
        bodyStyles.width = '100vw';
      }
    }, _this.unfixBody = function () {
      if (document.body && document.body.style) {
        var bodyStyles = document.body.style;
        bodyStyles.overflowX = _this.bodyOverflowX;
        bodyStyles.overflowY = _this.bodyOverflowY;
        bodyStyles.paddingRight = _this.bodyPaddingRight;
        if (_this.root) {
          _this.root.style.paddingRight = '';
        }
        bodyStyles.position = _this.bodyPosition;
        bodyStyles.top = _this.bodyTop;
        bodyStyles.width = _this.bodyWidth;
        window.scrollTo(0, _this.windowScrollY);
      }
    }, _this.bindRootRef = function (ref) {
      _this.root = ref;
    }, _this.renderCloseIcon = function (showIcon, toggleFlowOut) {
      return showIcon ? React.createElement('i', {
        className: 'icon-close-thin header--tablet__topbar-nav',
        onClick: toggleFlowOut }) : React.createElement('span', { className: 'flow-out__place-holder' });
    }, _this.render = function () {
      var _this$props = _this.props,
          shown = _this$props.shown,
          children = _this$props.children,
          toggleFlowOut = _this$props.toggleFlowOut,
          direction = _this$props.direction,
          renderMenuHeader = _this$props.renderMenuHeader,
          rest = _objectWithoutProperties(_this$props, ['shown', 'children', 'toggleFlowOut', 'direction', 'renderMenuHeader']);

      var classes = classNames({
        flowout: true,
        shown: shown
      }, 'header--tablet__aside');
      var iconFloatLeft = direction === 'left';

      return React.createElement(
        'div',
        _extends({ className: classes, ref: _this.bindRootRef, role: 'dialog' }, rest),
        React.createElement(
          'div',
          { className: 'flow-out__inner-wrapper' },
          React.createElement(
            'div',
            { className: 'flow-out__inner-header' },
            _this.renderCloseIcon(iconFloatLeft, toggleFlowOut),
            renderMenuHeader && renderMenuHeader(),
            _this.renderCloseIcon(!iconFloatLeft, toggleFlowOut)
          ),
          children
        )
      );
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(Flowout, [{
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      this.unfixBody();
    }
  }]);

  return Flowout;
}(React.PureComponent);

Flowout.displayName = 'AUIFlowout';
Flowout.defaultProps = {
  shown: false
};
export default Flowout;