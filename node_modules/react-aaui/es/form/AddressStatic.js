import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _extends from 'babel-runtime/helpers/extends';
import React from 'react';
import { bool, object } from 'prop-types';
import pickBy from 'lodash/pickBy';
import isEmpty from 'lodash/isEmpty';

import injectL10n from '../shared/injectL10n';
import { addressPropTypes } from './types';
import { aauiL10nShape } from '../shared/types';
import { interpolate } from '../shared/utils';
import addressFormats from './config/addressFormat.json';
import { reduceFields } from './utils';

var DEFAULT_TEMPLET = '{address.line1}\n{address.line2}\n{address.city}, {address.stateProvince}\n{address.postalCode}\n{address.country}';

function localizeCountry(countryCode, l10n) {
  var key = 'country.displayName.' + countryCode;
  var message = l10n.formatMessage(key);
  return message === key ? countryCode : message;
}

function parseAddress(address) {
  return _extends({}, address, {
    stateProvince: address.stateProvince === address.country ? null : address.stateProvince
  });
}

function localizeAddress(address, l10n) {
  return _extends({}, address, {
    country: localizeCountry(address.country, l10n)
  });
}

function formatAddress(format, address) {
  return format.split('\n').map(function (fields) {
    return fields.split(',').map(function (field) {
      return interpolate(field, { address: address });
    }).filter(function (field) {
      return !!field.trim();
    }).join(',').trim();
  }).filter(function (field) {
    return field;
  });
}

var AddressStaticPresetation = function AddressStaticPresetation(_ref) {
  var l10n = _ref.l10n,
      wrap = _ref.wrap,
      nowrap = _ref.nowrap,
      countriesFormatConfig = _ref.countriesFormatConfig,
      rest = _objectWithoutProperties(_ref, ['l10n', 'wrap', 'nowrap', 'countriesFormatConfig']);

  var _reduceFields = reduceFields(rest.address),
      _reduceFields$values = _reduceFields.values,
      address = _reduceFields$values === undefined ? {} : _reduceFields$values;

  var parsedAddress = parseAddress(address);
  var config = _extends({}, addressFormats, countriesFormatConfig);
  var template = config[parsedAddress.country] || DEFAULT_TEMPLET;
  var wrapped = wrap && !nowrap;
  var El = wrapped ? 'div' : 'span';
  var fields = [];

  if (!isEmpty(pickBy(parsedAddress, function (a) {
    return !isEmpty(a && a.trim());
  }))) {
    fields = formatAddress(template, localizeAddress(parsedAddress, l10n));
  }

  return React.createElement(
    El,
    null,
    fields.map(function (f, i) {
      return React.createElement(
        El,
        { key: f },
        f,
        !wrapped && i < fields.length - 1 ? ', ' : ''
      );
    })
  );
};

export { AddressStaticPresetation };
AddressStaticPresetation.propTypes = {
  address: addressPropTypes,
  wrap: bool,
  nowrap: bool,
  l10n: aauiL10nShape,
  countriesFormatConfig: object // eslint-disable-line
};

AddressStaticPresetation.defaultProps = {
  wrap: true,
  nowrap: false,
  countriesFormatConfig: {}
};

export default injectL10n()(AddressStaticPresetation);