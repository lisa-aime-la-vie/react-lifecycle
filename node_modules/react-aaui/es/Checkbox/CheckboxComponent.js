import _extends from 'babel-runtime/helpers/extends';
import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$defineProperties from 'babel-runtime/core-js/object/define-properties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import * as React from 'react';
import classNames from 'classnames';

import { identity } from '../shared/utils';
import L10nMessage from '../shared/L10nMessage';

var CHECKBOX = 'react-aaui.common.checkbox';

var Checkbox = function (_React$PureComponent) {
  _inherits(Checkbox, _React$PureComponent);

  function Checkbox(props) {
    _classCallCheck(this, Checkbox);

    var _this = _possibleConstructorReturn(this, (Checkbox.__proto__ || _Object$getPrototypeOf(Checkbox)).call(this, props));

    _initialiseProps.call(_this);

    var checked = 'checked' in props ? props.checked : props.defaultChecked;

    _this.state = {
      checked: !!checked
    };
    return _this;
  }

  _createClass(Checkbox, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      _Object$defineProperties(this, {
        checked: {
          get: function get() {
            return this.input.checked;
          },
          set: function set(v) {
            this.input.checked = !!v;
            this.setState({
              checked: !!v
            });
          }
        }
      });
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('checked' in nextProps) {
        this.setState({
          checked: !!nextProps.checked
        });
      }
    }

    // For WCAG 2.0, a form label cannot contain no context.
    // Related ticket: https://jirafnd.dev.activenetwork.com/browse/AWF-186

  }, {
    key: 'renderDefaultText',
    value: function renderDefaultText(ariaLabelId) {
      return React.createElement(
        'span',
        { id: ariaLabelId, style: { display: 'none' } },
        React.createElement(L10nMessage, { id: CHECKBOX })
      );
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          toggle = _props.toggle,
          size = _props.size,
          children = _props.children,
          className = _props.className,
          style = _props.style,
          disabled = _props.disabled,
          ariaLabelId = _props.ariaLabelId,
          rest = _objectWithoutProperties(_props, ['toggle', 'size', 'children', 'className', 'style', 'disabled', 'ariaLabelId']);

      var checked = this.state.checked;

      var checkboxWrapperClasses = classNames({
        'checkbox-wrapper': true,
        toggle: toggle,
        'toggle--empty': !children && toggle
      }, className);
      var checkboxClasses = classNames(_defineProperty({
        checkbox: !toggle,
        'checkbox--checked': !toggle && checked,
        'checkbox--disabled': !toggle && disabled
      }, 'checkbox--' + (size || ''), size || ''));

      return React.createElement(
        'label',
        { className: checkboxWrapperClasses, style: style },
        React.createElement(
          'span',
          { className: checkboxClasses },
          React.createElement('input', _extends({
            'aria-labelledby': ariaLabelId,
            ref: this.setWrappedComponentInstance,
            className: 'checkbox__input',
            disabled: disabled,
            type: 'checkbox',
            'aria-hidden': true
          }, rest, {
            checked: checked,
            onChange: this.handleChange })),
          toggle ? React.createElement('span', { className: 'toggle__text' }) : React.createElement('span', {
            className: 'checkbox__inner',
            role: 'checkbox',
            'aria-disabled': disabled,
            'aria-checked': checked }),
          children ? React.createElement(
            'span',
            { id: ariaLabelId, className: 'checkbox__text' },
            children
          ) : this.renderDefaultText(ariaLabelId)
        )
      );
    }
  }]);

  return Checkbox;
}(React.PureComponent);

Checkbox.displayName = 'AUICheckbox';
Checkbox.defaultProps = {
  onChange: identity,
  defaultChecked: false,
  ariaLabelId: undefined
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this.setWrappedComponentInstance = function (input) {
    _this2.input = input;
  };

  this.triggerOnChange = function (e) {
    var onChange = _this2.props.onChange;
    var checked = e.target.checked;


    if (!('checked' in _this2.props)) {
      _this2.setState({
        checked: checked
      });
    }

    // If you want to access the event properties in an asynchronous way,
    // you should call `event.persist()`` on the event,
    // which will remove the synthetic event from the pool
    // and allow references to the event to be retained by user code.
    e.persist && e.persist();

    // The `value` prop is consumed by `CheckboxGroup`
    onChange(e, { value: _this2.props.value });
  };

  this.handleChange = function (e) {
    var disabled = _this2.props.disabled;


    if (disabled) {
      return;
    }

    _this2.triggerOnChange(e);
  };
};

export default Checkbox;