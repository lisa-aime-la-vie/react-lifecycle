import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import * as React from 'react';
import { object } from 'prop-types';
import Checkbox from './Checkbox';
import { identity } from '../shared/utils';
import './CheckboxGroup.less';

var CheckboxGroup = function (_React$PureComponent) {
  _inherits(CheckboxGroup, _React$PureComponent);

  function CheckboxGroup(props) {
    _classCallCheck(this, CheckboxGroup);

    var _this = _possibleConstructorReturn(this, (CheckboxGroup.__proto__ || _Object$getPrototypeOf(CheckboxGroup)).call(this, props));

    _this.onChange = function (e, _ref) {
      var optionValue = _ref.value;

      // Should construct one new array for re-rendering
      var value = [].concat(_toConsumableArray(_this.state.value));
      var onChange = _this.props.onChange;

      var index = value.indexOf(optionValue);

      if (index === -1) {
        // If NOT found, then add it
        value.push(optionValue);
      } else {
        // If found, then delete it
        value.splice(index, 1);
      }

      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      onChange(value);
    };

    _this.state = {
      value: props.value || props.defaultValue || []
    };
    return _this;
  }

  _createClass(CheckboxGroup, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        auiCheckboxGroup: {
          onChange: this.onChange,
          value: this.state.value,
          disabled: this.props.disabled,
          size: this.props.size,
          name: this.props.name
        }
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setState({
          value: nextProps.value
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var data = this.props.data;
      var children = this.props.children;


      if (data) {
        children = data.map(function (_ref2, index) {
          var text = _ref2.text,
              value = _ref2.value,
              rest = _objectWithoutProperties(_ref2, ['text', 'value']);

          return React.createElement(
            Checkbox,
            _extends({ key: index, value: value }, rest),
            text
          );
        });
      }

      return React.createElement(
        'fieldset',
        null,
        React.createElement('legend', null),
        children
      );
    }
  }]);

  return CheckboxGroup;
}(React.PureComponent);

CheckboxGroup.displayName = 'AUICheckboxGroup';
CheckboxGroup.defaultProps = {
  onChange: identity
};
CheckboxGroup.childContextTypes = {
  auiCheckboxGroup: object
};
export default CheckboxGroup;