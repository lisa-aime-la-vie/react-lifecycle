import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import * as React from 'react';
import { object } from 'prop-types';

import Radio from './Radio';
import { identity } from '../shared/utils';
import './RadioGroup.less';

var RadioGroup = function (_React$PureComponent) {
  _inherits(RadioGroup, _React$PureComponent);

  function RadioGroup(props) {
    _classCallCheck(this, RadioGroup);

    var _this = _possibleConstructorReturn(this, (RadioGroup.__proto__ || _Object$getPrototypeOf(RadioGroup)).call(this, props));

    _this.onChange = function (e) {
      var value = e.target.value;
      var onChange = _this.props.onChange;


      if (!('value' in _this.props)) {
        _this.setState({
          value: value
        });
      }

      onChange(e);
    };

    _this.state = {
      value: props.value || props.defaultValue
    };
    return _this;
  }

  _createClass(RadioGroup, [{
    key: 'getChildContext',
    value: function getChildContext() {
      return {
        auiRadioGroup: {
          onChange: this.onChange,
          value: this.state.value,
          disabled: this.props.disabled,
          size: this.props.size,
          name: this.props.name
        }
      };
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if ('value' in nextProps) {
        this.setState({
          value: nextProps.value
        });
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var data = this.props.data;
      var children = this.props.children;


      if (data) {
        children = data.map(function (_ref, index) {
          var text = _ref.text,
              value = _ref.value,
              rest = _objectWithoutProperties(_ref, ['text', 'value']);

          return React.createElement(
            Radio,
            _extends({ key: index, value: value }, rest),
            text
          );
        });
      }

      return React.createElement(
        'fieldset',
        null,
        React.createElement('legend', null),
        children
      );
    }
  }]);

  return RadioGroup;
}(React.PureComponent);

RadioGroup.displayName = 'AUIRadioGroup';
RadioGroup.defaultProps = {
  onChange: identity
};
RadioGroup.childContextTypes = {
  auiRadioGroup: object
};
export default RadioGroup;