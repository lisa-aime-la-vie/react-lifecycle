import _extends from 'babel-runtime/helpers/extends';
import _defineProperty from 'babel-runtime/helpers/defineProperty';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import * as React from 'react';
import classNames from 'classnames';

var icons = {
  success: 'check-circle',
  warning: 'exclamation-circle',
  danger: 'times-circle',
  error: 'times-circle',
  info: 'info-circle'
};

var Alert = function (_React$PureComponent) {
  _inherits(Alert, _React$PureComponent);

  function Alert() {
    _classCallCheck(this, Alert);

    return _possibleConstructorReturn(this, (Alert.__proto__ || _Object$getPrototypeOf(Alert)).apply(this, arguments));
  }

  _createClass(Alert, [{
    key: 'render',
    value: function render() {
      var _classNames;

      var _props = this.props,
          className = _props.className,
          style = _props.style,
          type = _props.type,
          noClose = _props.noClose,
          inverse = _props.inverse,
          onClose = _props.onClose,
          children = _props.children,
          rest = _objectWithoutProperties(_props, ['className', 'style', 'type', 'noClose', 'inverse', 'onClose', 'children']);

      var classes = classNames((_classNames = {
        alert: true
      }, _defineProperty(_classNames, 'alert-' + type, type), _defineProperty(_classNames, 'alert-' + type + '--inverse', type && inverse), _defineProperty(_classNames, 'alert-dismissable', !noClose), _classNames), className);

      return React.createElement(
        'div',
        _extends({}, rest, { className: classes, style: style, role: 'alert', tabIndex: 0 }),
        React.createElement('span', { className: 'icon-' + icons[type] }),
        children,
        noClose ? undefined : React.createElement(
          'button',
          { type: 'button', className: 'close', onClick: onClose },
          '\xD7'
        )
      );
    }
  }]);

  return Alert;
}(React.PureComponent);

Alert.displayName = 'AUIAlert';
Alert.defaultProps = {
  type: 'info',
  noClose: false,
  inverse: false
};
export default Alert;