import _extends from 'babel-runtime/helpers/extends';
import _objectWithoutProperties from 'babel-runtime/helpers/objectWithoutProperties';
import _Object$getPrototypeOf from 'babel-runtime/core-js/object/get-prototype-of';
import _classCallCheck from 'babel-runtime/helpers/classCallCheck';
import _createClass from 'babel-runtime/helpers/createClass';
import _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';
import _inherits from 'babel-runtime/helpers/inherits';
import * as React from 'react';
import ReactDOM from 'react-dom';
import classNames from 'classnames';
import Alert from './Alert';

import { noop, omit } from '../shared/utils';
import './AlertBar.less';

var AlertBar = function (_React$PureComponent) {
  _inherits(AlertBar, _React$PureComponent);

  function AlertBar() {
    var _ref;

    var _temp, _this, _ret;

    _classCallCheck(this, AlertBar);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = AlertBar.__proto__ || _Object$getPrototypeOf(AlertBar)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
      show: false
    }, _this.setRef = function (element) {
      _this.element = element;
    }, _this.handleClose = function () {
      _this.setState({
        show: false
      });

      _this.element && _this.element.addEventListener('animationend', function () {
        _this.props.onClose();
      });
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  _createClass(AlertBar, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      var timeout = this.props.timeout;

      this.animateShow(timeout);
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      clearTimeout(this.animationFrame);
      if (this.timer) {
        clearTimeout(this.timer);
      }
    }
  }, {
    key: 'animateShow',
    value: function animateShow(timeout) {
      var _this2 = this;

      this.animationFrame = setTimeout(function () {
        _this2.setState({
          show: true
        });
      });

      if (timeout) {
        this.timer = setTimeout(function () {
          _this2.setState({
            show: false
          });
        }, timeout);
      }
    }
  }, {
    key: 'render',
    value: function render() {
      var _props = this.props,
          message = _props.message,
          type = _props.type,
          className = _props.className,
          container = _props.container,
          rest = _objectWithoutProperties(_props, ['message', 'type', 'className', 'container']);

      var show = this.state.show;

      var classes = classNames({
        'alert-bar': true,
        show: show
      }, className);
      var bar = React.createElement(
        'div',
        { className: classes, ref: this.setRef },
        React.createElement(
          Alert,
          _extends({}, omit(rest, ['timeout']), {
            type: type,
            onClose: this.handleClose }),
          React.createElement(
            'span',
            null,
            message
          )
        )
      );

      return container ? ReactDOM.createPortal(bar, container) : bar;
    }
  }]);

  return AlertBar;
}(React.PureComponent);

AlertBar.defaultProps = {
  onClose: noop
};
export default AlertBar;