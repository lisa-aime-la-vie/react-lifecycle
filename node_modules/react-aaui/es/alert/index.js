import _toConsumableArray from 'babel-runtime/helpers/toConsumableArray';
import _extends from 'babel-runtime/helpers/extends';
import _typeof from 'babel-runtime/helpers/typeof';
import Alert from './Alert';

import { alert, clear } from './util';

var wrapProps = function wrapProps(props) {
  var finalProps = props;

  if ((typeof props === 'undefined' ? 'undefined' : _typeof(props)) !== 'object') {
    finalProps = {
      message: props
    };
  }

  return _extends({}, finalProps);
};

Alert.success = function (props) {
  for (var _len = arguments.length, rest = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    rest[_key - 1] = arguments[_key];
  }

  return alert.apply(undefined, [_extends({
    type: 'success'
  }, wrapProps(props))].concat(_toConsumableArray(rest)));
};

Alert.warning = function (props) {
  for (var _len2 = arguments.length, rest = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    rest[_key2 - 1] = arguments[_key2];
  }

  return alert.apply(undefined, [_extends({
    type: 'warning'
  }, wrapProps(props))].concat(_toConsumableArray(rest)));
};

Alert.error = function (props) {
  for (var _len3 = arguments.length, rest = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
    rest[_key3 - 1] = arguments[_key3];
  }

  return alert.apply(undefined, [_extends({
    type: 'danger'
  }, wrapProps(props))].concat(_toConsumableArray(rest)));
};

Alert.info = function (props) {
  for (var _len4 = arguments.length, rest = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
    rest[_key4 - 1] = arguments[_key4];
  }

  return alert.apply(undefined, [_extends({
    type: 'info'
  }, wrapProps(props))].concat(_toConsumableArray(rest)));
};

Alert.clear = function () {
  return clear();
};

export default Alert;